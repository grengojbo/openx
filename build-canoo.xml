<!--
  This script contains the targets required to set up and run canoo web tests
  on the EC2 machine.

  Dependencies:
    * The directory '/var/www/html/openx' on the remote EC2 machine.
      Moreover, it is owned and writable by the 'admin' user.
    * The '/tests/canoo/properties/user.properties' file contains a proper
      EC2 configuration for canoo testing.
    * The 'ec2.properties' contains the proper ec2 connection properties.
    * The ssh/scp required jsch-0.1.33.jar from http://www.jcraft.com/jsch/index.html
      is available for ant (e.g. in the ant's lib directory)
    * For the canoo tests to work ant-contrib is required:
      http://ant-contrib.sourceforge.net/
      You have to put it into canoo lib directory
-->
<project name="canoo" default="run-test-canoo" basedir=".">
  <property name="canoo.log" value="${basedir}/canoo.log"/>
  <property name="timeout" value="60000"/>
  <property name="delivery_test" value="${basedir}/www/delivery_test"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <condition property="property_file" value="user.local.properties" else="user.remote.properties">
    <istrue value="${run.local}"/>
  </condition>

  <property file="${basedir}/tests/canoo/properties/${property_file}" prefix="canoo"/>
  <property file="${basedir}/ec2.properties"/>
  <property name="ec2.openx.config" value="${canoo.host}.conf.php"/>
  <property name="ec2.openx.database" value="openx"/>

  <macrodef name="canoo-ssh" description="Executes ssh command on the currently configured ec2 machine.">
    <attribute name="command" description="Command to be executed."/>
    <attribute name="username" default="admin"/>
    <attribute name="password" default="${ec2.admin.password}"/>
    <sequential>
      <sshexec host="${canoo.host}" username="admin" password="${ec2.admin.password}" trust="yes" output="${canoo.log}" append="true" timeout="${timeout}" command="@{command}"/>
    </sequential>
  </macrodef>

  <macrodef name="canoo-ssh-root" description="Executes ssh command on the currently configured ec2 machine.">
    <attribute name="command" description="Command to be executed."/>
    <sequential>
      <canoo-ssh command="@{command}" username="root" password="${ec2.root.password}"/>
    </sequential>
  </macrodef>

  <macrodef name="clean-delivery-cache-remote">
    <sequential>
      <canoo-ssh-root command="rm -f ${ec2.openx.dir}/var/cache/deliverycache_* ${ec2.openx.dir}/var/cache/cache_*"/>
    </sequential>
  </macrodef>

  <macrodef name="canoo-scp" description="Copies the specified file to the ec2 machine.">
    <attribute name="dir" description="Directory to copy the file to." default=""/>
    <element name="files" description="Fileset to be copied."/>
    <sequential>
      <scp todir="admin@@${canoo.host}:@{dir}" trust="yes" password="${ec2.admin.password}">
        <files/>
      </scp>
    </sequential>
  </macrodef>

  <!-- Cleans up the old OpenX directory. -->
  <target name="canoo-prepare-dir">
    <property name="ec2.openx.dir" value="/var/www/html/${release}"/>
    <echo message="Preparing directory: ${ec2.openx.dir}"/>
    <canoo-ssh command="mkdir ${ec2.openx.dir}"/>
  </target>

  <target name="canoo-copy-package">
    <canoo-scp>
      <files>
        <fileset dir="${dir.test.results}" includes="${canoo.package}"/>
      </files>
    </canoo-scp>
  </target>

  <target name="canoo-unpack-package">
    <canoo-ssh command="tar xzf ${canoo.package} -C ${ec2.openx.dir}"/>
    <canoo-ssh command="touch ${ec2.openx.dir}/var/INSTALLED"/>
    <canoo-ssh command="chmod -R a+w ${ec2.openx.dir}/var"/>
    <canoo-ssh command="chmod -R a+w ${ec2.openx.dir}/www/images"/>
    <canoo-scp dir="${ec2.openx.dir}/www">
      <files>
        <fileset dir="${basedir}/tests/canoo/php/" includes="*"/>
      </files>
    </canoo-scp>
  </target>

	<!-- should be less EC2 dependant -->
  <target name="canoo-create-openx-configuration-remote">
    <property name="openx.url" value="${canoo.host}/${release}/www"/>
    <exec dir="${basedir}/tests" executable="php" failonerror="true">
      <arg value="create-config-file.php" />
      <arg value="${ec2.openx.config}" />
      <arg value="database.host=${canoo.host}"/>
      <arg value="database.username=${canoo.sql.user}"/>
      <arg value="database.password=${canoo.sql.password}"/>
      <arg value="database.name=${ec2.openx.database}"/>
      <arg value="debug.production=0"/>
      <arg value="webpath.admin=${openx.url}/admin"/>
      <arg value="webpath.delivery=${openx.url}/delivery"/>
      <arg value="webpath.deliverySSL=${openx.url}/delivery"/>
      <arg value="webpath.images=${openx.url}/images"/>
      <arg value="webpath.imagesSSL=${openx.url}/images"/>
      <arg value="openads.installed=1"/>
      <arg value="table.prefix=oa_"/>
      <arg value="maintenance.autoMaintenance=0"/>
    </exec>
    <canoo-scp dir="${ec2.openx.dir}/var">
      <files>
        <fileset dir="tests" includes="${ec2.openx.config}"/>
      </files>
    </canoo-scp>
    <canoo-ssh command="rm -f ${ec2.openx.dir}/var/UPGRADE"/>
  </target>

  <target name="canoo-create-openx-configuration-local">
  	<echo message="Creating local configuration"/>
    <property name="openx.url" value="${canoo.host}/${canoo.basepath}"/>
    <exec dir="${basedir}/tests" executable="php" failonerror="true">
      <arg value="create-config-file.php" />
      <arg value="${canoo.host}.conf.php" />
      <arg value="database.host=${canoo.sql.host}"/>
      <arg value="database.username=${canoo.sql.user}"/>
      <arg value="database.password=${canoo.sql.password}"/>
      <arg value="database.name=${canoo.sql.database}"/>
      <arg value="debug.production=0"/>
      <arg value="webpath.admin=${openx.url}/admin"/>
      <arg value="webpath.delivery=${openx.url}/delivery"/>
      <arg value="webpath.deliverySSL=${openx.url}/delivery"/>
      <arg value="webpath.images=${openx.url}/images"/>
      <arg value="webpath.imagesSSL=${openx.url}/images"/>
      <arg value="openx.installed=1"/>
      <arg value="table.prefix=oa_"/>
      <arg value="maintenance.autoMaintenance=0"/>
    </exec>
  	<copy overwrite="true" todir="${basedir}/var" file="${basedir}/tests/${canoo.host}.conf.php"/>
  	<copy overwrite="true" tofile="${basedir}/var/INSTALLED" file="${basedir}/tests/${canoo.host}.conf.php"/>
  	<delete file="${basedir}/var/UPGRADE"/>
  	<chmod dir="${basedir}/var" perm="a+rwx" type="dir"/>
  	<chmod dir="${basedir}/var" perm="a+rw" type="both" includes="**/*"/>
  	<chmod dir="${basedir}/www" perm="a+rwx" type="dir"/>
  	<chmod dir="${basedir}/www" perm="a+rw" type="both" includes="**/*"/>
  </target>

  <target name="setup-delivery-files">
  	<copy todir="${delivery_test}">
  	  <fileset dir="${basedir}/tests/canoo/php"/>
  	</copy>
  </target>

  <target name="clean-delivery">
  	<delete dir="${delivery_test}" />
  </target>

  <macrodef name="execute-webtest" description="Executes webtest with provided target and additional properties.">
    <attribute name="target" description="Target to execute."/>
    <attribute name="properties" default="" description="Additional properties."/>
    <sequential>
      <if>
        <istrue value="${run.local}"/>
        <then>
          <!-- run locally -->
          <exec executable="${canoo.webtest.exec}" failonerror="true">
            <arg line="-f ${basedir}/tests/canoo/start.xml -Drun.local=${run.local} @{target} @{properties}"/>
          </exec>
        </then>
        <else>
          <!-- run remotely -->
          <exec executable="${canoo.webtest.exec}" failonerror="true">
            <arg line="-f ${basedir}/tests/canoo/start.xml -Drun.local=${run.local} @{target} -Dbasepath=${release}/www @{properties}"/>
          </exec>
        </else>
      </if>
    </sequential>
  </macrodef>

  <target name="run-test-canoo">
  	<echo message="Running ${canoo.webtest.exec} defined in config ${property_file}"/>
    <execute-webtest target="init-delivery-db" />
    <execute-webtest target="delivery" properties="-Dcanoo.host=${canoo.host} -Dec2.admin.password=${ec2.admin.password} -Dec2.openx.dir=${ec2.openx.dir}" />
  </target>

  <target name="test-canoo-one">
    <execute-webtest target="test-one" properties="-Dcanoo.host=${canoo.host} -Dec2.admin.password=${ec2.admin.password} -Dec2.openx.dir=${ec2.openx.dir} -Duc=${uc}" />
  </target>

  <target name="clean-ec2" description="Cleans the ec2 from all the files left.">
    <canoo-ssh command="rm ${canoo.package}"/>
    <canoo-ssh-root command="rm -rf ${ec2.openx.dir}"/>
  </target>
</project>

